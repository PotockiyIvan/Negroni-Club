// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Negroni_Club.Domain;

namespace Negroni_Club.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210218215910__AddTitleIconPath")]
    partial class _AddTitleIconPath
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "44546e06-8719-4ad8-b88a-f271ae9d6eab",
                            ConcurrencyStamp = "9efeaf20-ff0c-45db-bb0d-ec0188fe26cc",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "394b11a4-c732-4c02-b835-32c3cf195b61",
                            Email = "my@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MY@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHu5mMMQ1/TQBy5D8REZfdwpSgdYOcNhcBZaPen9j4xUClqgRvS4HDESbIv/7uGldw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            RoleId = "44546e06-8719-4ad8-b88a-f271ae9d6eab"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Negroni_Club.Domain.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DishesСategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DishesСategoryId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("Negroni_Club.Domain.Entities.DishesСategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleIconPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DishesCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e045f9d3-fee2-42a5-8578-129603b15473"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(310),
                            IndexNumber = 1,
                            Title = "Пасты"
                        },
                        new
                        {
                            Id = new Guid("7f17720a-132b-4921-8e95-db3f40ea3c2d"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1165),
                            IndexNumber = 2,
                            Title = "Салаты"
                        },
                        new
                        {
                            Id = new Guid("bdde9343-5528-415e-9b41-11d333bcf5b2"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1190),
                            IndexNumber = 3,
                            Title = "Бургеры"
                        },
                        new
                        {
                            Id = new Guid("4ea95bf7-cf8a-404d-91f0-939d61c861bd"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1193),
                            IndexNumber = 4,
                            Title = "Стейки"
                        },
                        new
                        {
                            Id = new Guid("2f76c06a-a672-4ba3-a10d-96a04581f343"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1195),
                            IndexNumber = 5,
                            Title = "Горячее"
                        },
                        new
                        {
                            Id = new Guid("4a4a8e00-4337-45fa-aa88-dca265975308"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1198),
                            IndexNumber = 6,
                            Title = "Шотландский Виски"
                        },
                        new
                        {
                            Id = new Guid("1dd9aba7-d5be-448a-a555-6ebe6137327a"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1200),
                            IndexNumber = 7,
                            Title = "Ирландский Виски"
                        },
                        new
                        {
                            Id = new Guid("7c4d8b49-cc12-4b60-a464-3edce0045d25"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1202),
                            IndexNumber = 8,
                            Title = "Японский Виски"
                        },
                        new
                        {
                            Id = new Guid("212282f7-4302-4668-bc27-b43fb4fe792c"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1205),
                            IndexNumber = 9,
                            Title = "Американский Виски"
                        },
                        new
                        {
                            Id = new Guid("5694c499-1687-48ce-a60a-1b04e44a8e53"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1207),
                            IndexNumber = 10,
                            Title = "Виски"
                        },
                        new
                        {
                            Id = new Guid("e2edbc7e-8764-484a-baf3-89a46f9519a4"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1209),
                            IndexNumber = 11,
                            Title = "Джин"
                        },
                        new
                        {
                            Id = new Guid("bc751392-ae59-4914-a4aa-7f24753cb0a6"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1211),
                            IndexNumber = 12,
                            Title = "Ром"
                        },
                        new
                        {
                            Id = new Guid("60613bbe-9f22-4e84-83f3-931b461dff38"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1214),
                            IndexNumber = 13,
                            Title = "Коньяк"
                        },
                        new
                        {
                            Id = new Guid("7787bc42-f3aa-4873-ad00-f36c71adb341"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1220),
                            IndexNumber = 14,
                            Title = "Бренди"
                        },
                        new
                        {
                            Id = new Guid("7b420447-6902-4dc9-8ff9-2652c7bf20f4"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1223),
                            IndexNumber = 15,
                            Title = "Текила"
                        },
                        new
                        {
                            Id = new Guid("62a1f1ba-2da7-4c38-b15b-de06701c0de3"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1225),
                            IndexNumber = 16,
                            Title = "Водка"
                        },
                        new
                        {
                            Id = new Guid("766275ef-4952-46ec-b06b-63c3a7162641"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1227),
                            IndexNumber = 17,
                            Title = "Апперитивы и Биттеры"
                        },
                        new
                        {
                            Id = new Guid("b29e55c8-ecfb-4399-9737-2eab0c2bdf27"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1229),
                            IndexNumber = 18,
                            Title = "Игристые Вина"
                        },
                        new
                        {
                            Id = new Guid("70af1f54-e61e-47a8-bc96-80dc1c26b8d8"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1232),
                            IndexNumber = 19,
                            Title = "Вина"
                        },
                        new
                        {
                            Id = new Guid("efa7dae2-f142-43c1-a8da-ee4a1e7e04bf"),
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 579, DateTimeKind.Utc).AddTicks(1234),
                            IndexNumber = 20,
                            Title = "Коктейли"
                        });
                });

            modelBuilder.Entity("Negroni_Club.Domain.Entities.Teammate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VKLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teammates");
                });

            modelBuilder.Entity("Negroni_Club.Domain.Entities.TextField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextFields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1813e8ab-e0b9-44c0-addd-babf0cf80abd"),
                            CodeWord = "Banner",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(2914),
                            Subtitle = "Место для громкой фразы",
                            Text = "Содержание заполняется администратором",
                            Title = "Информационная страница"
                        },
                        new
                        {
                            Id = new Guid("36b3ced4-93eb-477b-81ce-c9ebe0e6b1fe"),
                            CodeWord = "AboutUs",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(5802),
                            Text = "Содержание заполняется администратором",
                            Title = "О нас"
                        },
                        new
                        {
                            Id = new Guid("eadc6d86-d236-4dea-8b61-fdec8b2fcdc0"),
                            CodeWord = "OrderHome",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(6370),
                            Text = "Содержание заполняется администратором",
                            Title = "Закажи Домой"
                        },
                        new
                        {
                            Id = new Guid("ec3fdb67-de7f-41f6-9504-90d2043a5dfc"),
                            CodeWord = "Menu",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(6401),
                            Text = "Содержание заполняется администратором",
                            Title = "Меню"
                        },
                        new
                        {
                            Id = new Guid("ab6a1906-5024-4cb2-9111-82b36171d994"),
                            CodeWord = "Gallery",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(6422),
                            Text = "Содержание заполняется администратором",
                            Title = "Галерея"
                        },
                        new
                        {
                            Id = new Guid("ff9730cb-964e-46e2-b070-fa0e33c4ac89"),
                            CodeWord = "Blog",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(6446),
                            Text = "Содержание заполняется администратором",
                            Title = "Блог"
                        },
                        new
                        {
                            Id = new Guid("8ad6e41f-e37e-428f-a713-3d77e3ddf862"),
                            CodeWord = "Footer",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(6464),
                            Text = "Содержание заполняется администратором",
                            Title = "Футер"
                        });
                });

            modelBuilder.Entity("Negroni_Club.Domain.Entities.TitleImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TextFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TextFieldId");

                    b.ToTable("TitleImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("013bf5e9-0b38-4ec2-90ae-b7060c8cbbce"),
                            CodeWord = "BannerBackground",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(7268),
                            TextFieldId = new Guid("1813e8ab-e0b9-44c0-addd-babf0cf80abd"),
                            TitleImagePath = "banner.jpg"
                        },
                        new
                        {
                            Id = new Guid("463385f4-3b78-43ec-9849-7363397df7a3"),
                            CodeWord = "AboutUsBigTitleImage",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(9507),
                            TextFieldId = new Guid("36b3ced4-93eb-477b-81ce-c9ebe0e6b1fe"),
                            TitleImagePath = "about-main.jpg"
                        },
                        new
                        {
                            Id = new Guid("39b8284c-6b8e-4ab7-ade3-bd42ae778267"),
                            CodeWord = "AboutUsSmallTitleImage",
                            DateAdded = new DateTime(2021, 2, 18, 21, 59, 9, 578, DateTimeKind.Utc).AddTicks(9562),
                            TextFieldId = new Guid("36b3ced4-93eb-477b-81ce-c9ebe0e6b1fe"),
                            TitleImagePath = "about-inset.jpg"
                        });
                });

            modelBuilder.Entity("Negroni_Club.Models.LoginViewModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("LoginViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Negroni_Club.Domain.Entities.Dish", b =>
                {
                    b.HasOne("Negroni_Club.Domain.Entities.DishesСategory", "DishesСategory")
                        .WithMany("Dishes")
                        .HasForeignKey("DishesСategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Negroni_Club.Domain.Entities.TitleImage", b =>
                {
                    b.HasOne("Negroni_Club.Domain.Entities.TextField", "TextField")
                        .WithMany("TitleImages")
                        .HasForeignKey("TextFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
